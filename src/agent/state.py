

from typing import Annotated
from langchain_core.messages import AnyMessage
from langgraph.graph import add_messages

from agent.schemas import ProspectInfoSchema, EmailContentSchema

from pydantic import BaseModel, Field


class InputState(BaseModel):
    """Defines the input state for the workflow, representing a narrower interface to the outside world.

    This class is used to define the initial state and structure of incoming data.
    """
    prospect_info: ProspectInfoSchema


class State(InputState):
    """Represents the complete workflow state, extending InputState with additional attributes.

    This class can be used to store any information needed throughout the workflow's lifecycle.
    """
    messages: Annotated[list[AnyMessage],
                        add_messages] = Field(default_factory=list)
    """
    Messages history.
    """

    email_content: EmailContentSchema | None = None
    """
    Email content generated by the llm.
    """

    feedback: str | None = Field(
        default=None,
        description="User feedback about the AI generated email"
    )
    """
    User feedback about the AI generated email.
    """

    # Additional attributes can be added here as needed.
    # Common examples include:
    # retrieved_documents: List[Document] = field(default_factory=list)
    # extracted_entities: Dict[str, Any] = field(default_factory=dict)
    # api_connections: Dict[str, Any] = field(default_factory=dict)
